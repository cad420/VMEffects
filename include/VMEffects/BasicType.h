
#pragma once
#include <cstdint>

namespace vm
{
namespace fx
{
enum ValueType : uint8_t
{
	VM_VT_UNNKOWN=0,
	
	VM_VT_INT8,
	VM_VT_INT16,
	VM_VT_INT32,
	VM_VT_UINT8,
	VM_VT_UINT16,
	VM_VT_UINT32,
	VM_VT_FLOAT16,
	VM_VT_FLOAT32,
};

enum BindType : uint32_t
{
	
};

enum Usage : uint8_t
{
	VM_USG_STATIC=0,
	VM_USG_DEFAULT,
	VM_USG_DYNAMIC,
	VM_USG_STAGING
};


enum TextureFormat : uint16_t
{
	VM_TF_UNKNOWN = 0,
	VM_TF_R3_G3_B2,
	VM_TF_RGB,
	VM_TF_RGB4,
	VM_TF_RGB5,
	VM_TF_RGB8,
	VM_TF_RGB10,
	VM_TF_RGB12,
	VM_TF_RGB16,
	VM_TF_RGBA,
	VM_TF_RGBA2,
	VM_TF_RGBA4,
	VM_TF_RGB5_A1,
	VM_TF_RGBA8,
	VM_TF_RGB10_A2,
	VM_TF_RGBA12,
	VM_TF_RGBA16,

	// ARB_texture_float / OpenGL 3
	VM_TF_RGBA32F,
	VM_TF_RGB32F,
	VM_TF_RGBA16F,
	VM_TF_RGB16F,

	// EXT_packed_depth_stencil / GL_ARB_framebuffer_object
	VM_TF_DEPTH_STENCIL,
	VM_TF_DEPTH24_STENCIL8,

	// ARB_depth_buffer_float
	VM_TF_DEPTH_COMPONENT32F,
	VM_TF_DEPTH32F_STENCIL8,

	// ARB_depth_texture
	VM_TF_DEPTH_COMPONENT,
	VM_TF_DEPTH_COMPONENT16,
	VM_TF_DEPTH_COMPONENT24,
	VM_TF_DEPTH_COMPONENT32,

	// GL_ARB_texture_rg
	VM_TF_RED,
	VM_TF_COMPRESSED_RED,  // = GL_COMPRESSED_RED,
	VM_TF_COMPRESSED_RG,   // = GL_COMPRESSED_RG,
	VM_TF_RG,			   //= GL_RG,
	VM_TF_R8,			   //= GL_R8,
	VM_TF_R16,			   //= GL_R16,
	VM_TF_RG8,			   //= GL_RG8,
	VM_TF_RG16,			   //= GL_RG16,
	VM_TF_R16F,			   //= GL_R16F,
	VM_TF_R32F,			   //= GL_R32F,
	VM_TF_RG16F,		   // = GL_RG16F,
	VM_TF_RG32F,		   // = GL_RG32F,
	VM_TF_R8I,			   // = GL_R8I,
	VM_TF_R8UI,			   // = GL_R8UI,
	VM_TF_R16I,			   // = GL_R16I,
	VM_TF_R16UI,		   // = GL_R16UI,
	VM_TF_R32I,			   // = GL_R32I,
	VM_TF_R32UI,		   // = GL_R32UI,
	VM_TF_RG8I,			   // = GL_RG8I,
	VM_TF_RG8UI,		   // = GL_RG8UI,
	VM_TF_RG16I,		   // = GL_RG16I,
	VM_TF_RG16UI,		   // = GL_RG16UI,
	VM_TF_RG32I,		   // = GL_RG32I,
	VM_TF_RG32UI,		   // = GL_RG32UI,

	// sRGB OpenGL 2.1
	//TF_SLUMINANCE_ALPHA = GL_SLUMINANCE_ALPHA,
	//TF_SLUMINANCE8_ALPHA8 = GL_SLUMINANCE8_ALPHA8,
	//TF_SLUMINANCE = GL_SLUMINANCE,
	//TF_SLUMINANCE8 = GL_SLUMINANCE8,
	//TF_COMPRESSED_SLUMINANCE = GL_COMPRESSED_SLUMINANCE,
	//TF_COMPRESSED_SLUMINANCE_ALPHA = GL_COMPRESSED_SLUMINANCE_ALPHA,

	// sRGB OpenGL 2.1 / 3.x
	VM_TF_SRGB,					  // = GL_SRGB,
	VM_TF_SRGB8,				  // = GL_SRGB8,
	VM_TF_SRGB_ALPHA,			  // = GL_SRGB_ALPHA,
	VM_TF_SRGB8_ALPHA8,			  // = GL_SRGB8_ALPHA8,
	VM_TF_COMPRESSED_SRGB,		  // = GL_COMPRESSED_SRGB,
	VM_TF_COMPRESSED_SRGB_ALPHA,  // = GL_COMPRESSED_SRGB_ALPHA,

	// from table 3.12 opengl api specs 4.1
	VM_TF_R8_SNORM,		   // = GL_R8_SNORM,
	VM_TF_R16_SNORM,	   // = GL_R16_SNORM,
	VM_TF_RG8_SNORM,	   // = GL_RG8_SNORM,
	VM_TF_RG16_SNORM,	  // = GL_RG16_SNORM,
	VM_TF_RGB8_SNORM,	  // = GL_RGB8_SNORM,
	VM_TF_RGBA8_SNORM,	 // = GL_RGBA8_SNORM,
	VM_TF_RGB10_A2UI,	  // = GL_RGB10_A2UI,
	VM_TF_RGBA16_SNORM,	// = GL_RGBA16_SNORM,
	VM_TF_R11F_G11F_B10F,  // = GL_R11F_G11F_B10F,
	VM_TF_RGB9_E5,		   // = GL_RGB9_E5,
	VM_TF_RGB8I,		   // = GL_RGB8I,
	VM_TF_RGB8UI,		   // = GL_RGB8UI,
	VM_TF_RGB16I,		   // = GL_RGB16I,
	VM_TF_RGB16UI,		   //= GL_RGB16UI,
	VM_TF_RGB32I,		   // = GL_RGB32I,
	VM_TF_RGB32UI,		   // = GL_RGB32UI,
	VM_TF_RGBA8I,		   //= GL_RGBA8I,
	VM_TF_RGBA8UI,		   // = GL_RGBA8UI,
	VM_TF_RGBA16I,		   // = GL_RGBA16I,
	VM_TF_RGBA16UI,		   // = GL_RGBA16UI,
	VM_TF_RGBA32I,		   // = GL_RGBA32I,
	VM_TF_RGBA32UI,		   // = GL_RGBA32UI
};

}
}  // namespace vm
